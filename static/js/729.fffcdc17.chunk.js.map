{"version":3,"file":"static/js/729.fffcdc17.chunk.js","mappings":"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","sources":["views/widgets/WidgetsBrand.js","data/data.js","views/widgets/WidgetsDropdown.js","views/dashboard/Dashboard.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CWidgetStatsD, CRow, CCol } from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cibFacebook, cibLinkedin, cibTwitter, cilCalendar } from '@coreui/icons'\nimport { CChart } from '@coreui/react-chartjs'\n\nconst WidgetsBrand = ({ withCharts }) => {\n  const chartOptions = {\n    elements: {\n      line: {\n        tension: 0.4,\n      },\n      point: {\n        radius: 0,\n        hitRadius: 10,\n        hoverRadius: 4,\n        hoverBorderWidth: 3,\n      },\n    },\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false,\n      },\n    },\n    scales: {\n      x: {\n        display: false,\n      },\n      y: {\n        display: false,\n      },\n    },\n  }\n\n  return (\n    <CRow>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsD\n          className=\"mb-4\"\n          {...(withCharts && {\n            chart: (\n              <CChart\n                className=\"position-absolute w-100 h-100\"\n                type=\"line\"\n                data={{\n                  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                  datasets: [\n                    {\n                      backgroundColor: 'rgba(255,255,255,.1)',\n                      borderColor: 'rgba(255,255,255,.55)',\n                      pointHoverBackgroundColor: '#fff',\n                      borderWidth: 2,\n                      data: [65, 59, 84, 84, 51, 55, 40],\n                      fill: true,\n                    },\n                  ],\n                }}\n                options={chartOptions}\n              />\n            ),\n          })}\n          icon={<CIcon icon={cibFacebook} height={52} className=\"my-4 text-white\" />}\n          values={[\n            { title: 'Total Leads', value: '89K' },\n            { title: 'warm leads', value: '459' },\n          ]}\n          style={{\n            '--cui-card-cap-bg': '#3b5998',\n          }}\n        />\n      </CCol>\n\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsD\n          className=\"mb-4\"\n          {...(withCharts && {\n            chart: (\n              <CChart\n                className=\"position-absolute w-100 h-100\"\n                type=\"line\"\n                data={{\n                  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                  datasets: [\n                    {\n                      backgroundColor: 'rgba(255,255,255,.1)',\n                      borderColor: 'rgba(255,255,255,.55)',\n                      pointHoverBackgroundColor: '#fff',\n                      borderWidth: 2,\n                      data: [1, 13, 9, 17, 34, 41, 38],\n                      fill: true,\n                    },\n                  ],\n                }}\n                options={chartOptions}\n              />\n            ),\n          })}\n          icon={<CIcon icon={cibTwitter} height={52} className=\"my-4 text-white\" />}\n          values={[\n            { title: 'total leads', value: '973k' },\n            { title: 'warm leads', value: '17' },\n          ]}\n          style={{\n            '--cui-card-cap-bg': '#00aced',\n          }}\n        />\n      </CCol>\n\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsD\n          className=\"mb-4\"\n          {...(withCharts && {\n            chart: (\n              <CChart\n                className=\"position-absolute w-100 h-100\"\n                type=\"line\"\n                data={{\n                  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                  datasets: [\n                    {\n                      backgroundColor: 'rgba(255,255,255,.1)',\n                      borderColor: 'rgba(255,255,255,.55)',\n                      pointHoverBackgroundColor: '#fff',\n                      borderWidth: 2,\n                      data: [78, 81, 80, 45, 34, 12, 40],\n                      fill: true,\n                    },\n                  ],\n                }}\n                options={chartOptions}\n              />\n            ),\n          })}\n          icon={<CIcon icon={cibLinkedin} height={52} className=\"my-4 text-white\" />}\n          values={[\n            { title: 'total leads', value: '500' },\n            { title: 'warm leads', value: '1.292' },\n          ]}\n          style={{\n            '--cui-card-cap-bg': '#4875b4',\n          }}\n        />\n      </CCol>\n\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsD\n          className=\"mb-4\"\n          color=\"warning\"\n          {...(withCharts && {\n            chart: (\n              <CChart\n                className=\"position-absolute w-100 h-100\"\n                type=\"line\"\n                data={{\n                  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                  datasets: [\n                    {\n                      backgroundColor: 'rgba(255,255,255,.1)',\n                      borderColor: 'rgba(255,255,255,.55)',\n                      pointHoverBackgroundColor: '#fff',\n                      borderWidth: 2,\n                      data: [35, 23, 56, 22, 97, 23, 64],\n                      fill: true,\n                    },\n                  ],\n                }}\n                options={chartOptions}\n              />\n            ),\n          })}\n          icon={<CIcon icon={cilCalendar} height={52} className=\"my-4 text-white\" />}\n          values={[\n            { title: 'total leads', value: '12+' },\n            { title: 'warm leads', value: '4' },\n          ]}\n        />\n      </CCol>\n    </CRow>\n  )\n}\n\nWidgetsBrand.propTypes = {\n  withCharts: PropTypes.bool,\n}\n\nexport default WidgetsBrand\n","import avatar1 from 'src/assets/images/avatars/1.jpg'\nimport avatar2 from 'src/assets/images/avatars/2.jpg'\nimport avatar3 from 'src/assets/images/avatars/3.jpg'\nimport avatar4 from 'src/assets/images/avatars/4.jpg'\nimport avatar5 from 'src/assets/images/avatars/5.jpg'\nimport avatar6 from 'src/assets/images/avatars/6.jpg'\n\nconst getDate = () => {\n  const today = new Date();\n  const yyyy = today.getFullYear();\n  let mm = today.getMonth() + 1; // Months start at 0!\n  let dd = today.getDate();\n  let hour = today.getHours();\n  let min = today.getMinutes();\n\n  if (dd < 10) dd = '0' + dd;\n  if (mm < 10) mm = '0' + mm;\n\n  const formattedToday = dd + '/' + mm + '/' + yyyy + ' ' + hour + ':' + min\n  return formattedToday;\n}\nconst monthlyRecord = [\n  {\n    id: 1,\n    emailid: 'gayle@gmail.com',\n    content: 'May I help you ?',\n    type: 'WARM_LEAD',\n    avatar: avatar1,\n    time: getDate()\n  },\n  {\n    emailid: 'ricky@gmail.com',\n    content: 'Where is my order ? ',\n    type: 'WARM_LEAD',\n    time: getDate(), id: 2,\n    avatar: avatar2\n  },\n  {\n    emailid: 'mathew@gmail.com',\n    content: 'Would you like to know the benfits',\n    type: 'WARM_LEAD',\n    id: 3,\n    time: getDate(),\n    avatar: avatar3\n  },\n  {\n    emailid: 'chia@gmail.com',\n    content: 'How may I help you',\n    type: 'WARM_LEAD',\n    time: getDate(),\n    avatar: avatar4,\n    id: 7,\n  },\n  {\n    emailid: 'rak@gmail.com',\n    content: 'Is it working for you ?',\n    type: 'WARM_LEAD',\n    id: 6,\n    time: getDate(),\n    avatar: avatar5\n  },\n  {\n    emailid: 'senzesh@gmail.com',\n    content: 'How are you today ?',\n    type: 'RESPONDED',\n    id: 4,\n    time: getDate(),\n    avatar: avatar5\n  },\n  {\n    emailid: 'chris@gmail.com',\n    content: 'How are you feeling today ?',\n    type: 'WARM_LEAD',\n    time: getDate(),\n    id: 5,\n  },\n  {\n    emailid: 'akash@gmail.com',\n    content: 'Sorry for the inconvience',\n    type: 'UNVISITED',\n    id: 30,\n    avatar: avatar6,\n    time: getDate(),\n  },\n  {\n    emailid: 'simon@gmail.com',\n    content: 'How is the weather?',\n    type: 'UNVISITED',\n    time: getDate(),\n    id: 30,\n    avatar: avatar4\n  },\n  {\n    emailid: 'gale@gmail.com',\n    content: 'Hope you are doing well',\n    type: 'UNVISITED',\n    id: 30,\n    avatar: avatar1,\n    time: getDate(),\n  },\n  {\n    emailid: 'hyden@gmail.com',\n    content: 'This will make your day',\n    type: 'UNVISITED',\n    time: getDate(),\n    id: 32,\n    avatar: avatar3\n  },\n  {\n    emailid: 'andrew@gmail.com',\n    content: 'hello world3',\n    type: 'UNVISITED',\n    id: 31,\n    time: getDate(),\n    avatar: avatar1\n  },\n  {\n    emailid: 'john@gmail.com',\n    content: 'hello world3',\n    type: 'UNVISITED',\n    id: 30,\n    time: getDate(),\n    avatar: avatar2\n  },\n];\n\nconst incidents = [\n  {\n    type: 'ADMIN_TO_LEAD',\n    time: new Date(),\n    content: 'I hope you are doing well today',\n  },\n  {\n    type: 'LEAD_TO_ADMIN',\n    time: new Date(),\n    content: 'hello world',\n  },\n  {\n    type: 'ADMIN_TO_LEAD',\n    time: new Date(),\n    content: 'hello world',\n  },\n  {\n    type: 'LEAD_TO_ADMIN',\n    time: new Date(),\n    content: 'hello world',\n  },\n  {\n    type: 'ADMIN_TO_LEAD',\n    time: new Date(),\n    content: 'hello world',\n  },\n  {\n    type: 'LEAD_TO_ADMIN',\n    time: new Date(),\n    content: 'hello world',\n  },\n];\n\n\nconst yearlyData = {\n  total_leads: {\n    \"January\": 66,\n    \"February\": 33,\n    \"March\": 44,\n    \"April\": 55,\n    \"May\": 53,\n    \"June\": 66,\n    \"July\": 87,\n    \"August\": 33,\n    \"September\": 33,\n    \"October\": 88,\n    \"November\": 56,\n    \"December\": 37\n  },\n  warm_leads: {\n    \"January\": 11,\n    \"February\": 33,\n    \"March\": 33,\n    \"April\": 22,\n    \"May\": 11,\n    \"June\": 22,\n    \"July\": 33,\n    \"August\": 22,\n    \"September\": 22,\n    \"October\": 11,\n    \"November\": 44,\n    \"December\": 66\n  },\n  leads_responded: {\n    \"January\": 66,\n    \"February\": 33,\n    \"March\": 22,\n    \"April\": 11,\n    \"May\": 22,\n    \"June\": 33,\n    \"July\": 44,\n    \"August\": 22,\n    \"September\": 11,\n    \"October\": 22,\n    \"November\": 33,\n    \"December\": 44\n  },\n  leads_unresponded: {\n    \"January\": 66,\n    \"February\": 33,\n    \"March\": 13,\n    \"April\": 34,\n    \"May\": 23,\n    \"June\": 43,\n    \"July\": 13,\n    \"August\": 33,\n    \"September\": 23,\n    \"October\": 13,\n    \"November\": 43,\n    \"December\": 23\n  }\n}\n\nconst getMonthlyData = () => {\n  return new Promise((resolve, reject) => {\n    const month = new Date().getMonth();\n    setTimeout(async () => {\n      try {\n        const response = await fetch(`/api/month/${month+1}`)\n        await response.json();\n      } catch (error) {\n        console.log(error)\n      } finally {\n        resolve(monthlyRecord)\n      }\n    }, 500)\n  })\n}\n\nconst getIncidents = (id) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(async () => {\n      try {\n        const response = await fetch(`/api/incidents/${id}`)\n        await response.json();\n      } catch (error) {\n        console.log(error)\n      } finally {\n        resolve(incidents)\n      }\n    }, 200)\n  })\n}\n\nexport { yearlyData, getMonthlyData, getIncidents };\n","import React, { useState, useEffect } from 'react'\nimport {\n  CRow,\n  CCol,\n  CWidgetStatsA,\n  CSpinner\n} from '@coreui/react'\nimport { getStyle } from '@coreui/utils'\nimport { CChartBar, CChartLine } from '@coreui/react-chartjs'\nimport { yearlyData, getMonthlyData, getIncidents } from \"../../data/data\";\n\nconst WidgetsDropdown = () => {\n  let [warmleads, setWarmLeads] = useState([]);\n  let [responded, setResponded] = useState([]);\n  let [totalLeads, setTotalLeads] = useState([]);\n  let [unvisited, setUnvisited] = useState([]);\n  let [totalLeadsYearly, setTotalLeadsYearly] = useState([]);\n  let [totalWarmLeadsYearly, setTotalWarmLeadsYearly] = useState([]);\n  let [totalRespondedYearly, setTotalRespondedYearly] = useState([]);\n  let [totalNotVisitedYearly, setTotalNotVisitedYearly] = useState([]);\n  let [isLoading, setIsLoading] = useState(true)\n\n  const getData = async () => {\n    try {\n      const response = await getMonthlyData();\n      setTotalLeads(response);\n    } catch (error) {\n      console.error(error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    setIsLoading(true)\n    getData()\n  }, [])\n\n  useEffect(() => {\n\n    const warmleads = totalLeads?.filter((d) => {\n      return d.type.toLowerCase() === \"WARM_LEAD\".toLowerCase();\n    });\n    const responded = totalLeads?.filter((d) => {\n      return d.type.toLowerCase() === \"RESPONDED\".toLowerCase();\n    });\n    const unvisited = totalLeads?.filter((d) => {\n      return d.type.toLowerCase() === \"UNVISITED\".toLowerCase();\n    });\n\n    setWarmLeads(warmleads);\n    setResponded(responded);\n    setUnvisited(unvisited);\n\n    setTotalLeadsYearly(yearlyData.total_leads);\n    setTotalWarmLeadsYearly(yearlyData.warm_leads);\n    setTotalRespondedYearly(yearlyData.leads_responded);\n    setTotalNotVisitedYearly(yearlyData.leads_unresponded);\n\n  }, [totalLeads]);\n\n  if (isLoading) {\n    return <CSpinner color=\"primary\" className='spinner' align=\"center\" />\n  }\n\n  return (\n    <CRow>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"primary\"\n          value={\n            <>\n              {totalLeads.length}\n            </>\n          }\n          title=\"Total Leads\"\n          chart={\n            <CChartLine\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: Object.keys(totalLeadsYearly),\n                datasets: [\n                  {\n                    label: 'My First dataset',\n                    backgroundColor: 'transparent',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    pointBackgroundColor: getStyle('--cui-primary'),\n                    data: Object.values(totalLeadsYearly),\n                  },\n                ],\n              }}\n              options={{\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    grid: {\n                      display: false,\n                      drawBorder: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                  y: {\n                    min: 30,\n                    max: 89,\n                    display: false,\n                    grid: {\n                      display: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                },\n                elements: {\n                  line: {\n                    borderWidth: 1,\n                    tension: 0.4,\n                  },\n                  point: {\n                    radius: 4,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"info\"\n          value={\n            <>\n              {warmleads.length}\n            </>\n          }\n          title=\"Warm Leads\"\n          chart={\n            <CChartLine\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: Object.keys(totalWarmLeadsYearly),\n                datasets: [\n                  {\n                    label: 'My First dataset',\n                    backgroundColor: 'transparent',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    pointBackgroundColor: getStyle('--cui-info'),\n                    data: Object.values(totalWarmLeadsYearly),\n                  },\n                ],\n              }}\n              options={{\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    grid: {\n                      display: false,\n                      drawBorder: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                  y: {\n                    min: -9,\n                    max: 39,\n                    display: false,\n                    grid: {\n                      display: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                },\n                elements: {\n                  line: {\n                    borderWidth: 1,\n                  },\n                  point: {\n                    radius: 4,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"warning\"\n          value={\n            <>\n              {responded.length}\n            </>\n          }\n          title=\"Leads Responded\"\n          chart={\n            <CChartLine\n              className=\"mt-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: Object.keys(totalRespondedYearly),\n                datasets: [\n                  {\n                    label: 'My First dataset',\n                    backgroundColor: 'rgba(255,255,255,.2)',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    data: Object.values(totalRespondedYearly),\n                    fill: true,\n                  },\n                ],\n              }}\n              options={{\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    display: false,\n                  },\n                  y: {\n                    display: false,\n                  },\n                },\n                elements: {\n                  line: {\n                    borderWidth: 2,\n                    tension: 0.4,\n                  },\n                  point: {\n                    radius: 0,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"danger\"\n          value={\n            <>\n              {unvisited.length}\n            </>\n          }\n          title=\"Leads Unvisited\"\n          chart={\n            <CChartBar\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: Object.keys(totalNotVisitedYearly),\n                datasets: [\n                  {\n                    label: 'My First dataset',\n                    backgroundColor: 'rgba(255,255,255,.2)',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    data: Object.values(totalNotVisitedYearly),\n                    barPercentage: 0.6,\n                  },\n                ],\n              }}\n              options={{\n                maintainAspectRatio: false,\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                scales: {\n                  x: {\n                    grid: {\n                      display: false,\n                      drawTicks: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                  y: {\n                    grid: {\n                      display: false,\n                      drawBorder: false,\n                      drawTicks: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default WidgetsDropdown\n","import React, { useState, useEffect, Suspense } from 'react'\nimport './style.css'\nimport {\n  CAvatar,\n  CCol,\n  CProgress,\n  CRow,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CPagination,\n  CPaginationItem,\n  CSpinner\n} from '@coreui/react'\nimport WidgetsBrand from '../widgets/WidgetsBrand'\nimport Select from 'react-select';\nimport WidgetsDropdown from '../widgets/WidgetsDropdown'\nimport { getMonthlyData, getIncidents } from \"../../data/data\";\n\n\nfunction Inbox({ data, selectedOption }) {\n  let [selectedLead, setSelectedLead] = useState({});\n  let [incidents, setIncidents] = useState([]);\n  let [pageNo, setPageNo] = useState(1);\n  let [filteredData, setFilteredData] = useState(data);\n\n  const handleClick = async (item) => {\n    try {\n      const incidents = await getIncidents(item.id)\n      setIncidents(incidents)\n    } catch(error) {\n      console.error(error)\n    } finally {\n      setSelectedLead(item);\n    }\n  };\n\n\n  useEffect(() => {\n    if (selectedOption.value === 'ALL') {\n      setFilteredData(data)\n      return\n    }\n    const filteredData = data?.filter(d => d.type.toLowerCase() === selectedOption.value.toLowerCase())\n    setFilteredData(filteredData)\n  }, [selectedOption])\n\n  return (\n    <>\n      <div className=\"inbox-container\">\n        <div className=\"left-bar\">\n          {filteredData.slice(filteredData.length / 6)?.map((d) => {\n            return <Item item={d} handleClick={handleClick} />;\n          })}\n        </div>\n\n        <div className=\"right-bar\">\n          <Suspense fallback={<CSpinner color=\"primary\" />}>\n            {\n              incidents?.map((incident) => {\n                if (Object.keys(selectedLead).length == 0) return <div />\n                return (\n                  incident.type === \"LEAD_TO_ADMIN\" ? <div className=\"msger-chat\" >\n                    <div className=\"msg-bubble\">\n                      <div className=\"msg-info\">\n                        <div className=\"msg-info-name\">{selectedLead.emailid}</div>\n                        <div className=\"msg-info-time\">12:45</div>\n                      </div>\n\n                      <div className=\"msg-text\">\n                        {incident.content}\n                      </div>\n                    </div>\n                  </div> : <div className=\"msg right-msg\">\n                    <div className=\"msg-img\"> <CAvatar size=\"md\" src={selectedLead.avatar} />\n                    </div>\n\n                    <div className=\"msg-bubble\">\n                      <div className=\"msg-info\">\n                        <div className=\"msg-info-name\">Admin</div>\n                        <div className=\"msg-info-time\">12:46</div>\n                        <div className=\"msg-info-time\"></div>\n                      </div>\n\n                      <div className=\"msg-text\">{incident.content}\n                      </div>\n                    </div>\n                  </div>\n                )\n              })\n            }\n          </Suspense>\n        </div>\n      </div>\n      {filteredData.length > 6 ? <CPagination size=\"sm\" align=\"center\" aria-label=\"Page navigation example\">\n        <CPaginationItem disabled={pageNo === 1}>Previous</CPaginationItem>\n        <CPaginationItem>{pageNo}</CPaginationItem>\n        <CPaginationItem>{pageNo + 1}</CPaginationItem>\n        <CPaginationItem>{pageNo + 2}</CPaginationItem>\n        <CPaginationItem disabled={pageNo === filteredData.length / 6 - 1}>Next</CPaginationItem>\n      </CPagination> : null}\n    </>\n  );\n}\n\nfunction Item({ item, handleClick }) {\n  return (\n    <div className=\"item-container\" onClick={() => handleClick(item)}>\n      <div className=\"email-to\">\n        <div> {item.emailid} </div><div className=\"time\">{item.time}</div>{' '}\n      </div>\n      <div className=\"content\">{item.content}</div>\n    </div>\n  );\n}\n\nconst Dashboard = () => {\n\n  const progressExample = [\n    { title: 'Visits', value: '29 Users', percent: 40, color: 'success' },\n    { title: 'Unique', value: '24 Users', percent: 20, color: 'info' },\n    { title: 'Pageviews', value: '78 Views', percent: 60, color: 'warning' },\n    { title: 'New Users', value: '22 Users', percent: 80, color: 'danger' },\n    { title: 'Bounce Rate', value: 'Average Rate', percent: 40.15, color: 'primary' },\n  ]\n\n  const defaultValue = {\n    id: 0,\n    value: \"ALL\",\n    label: \"All Leads\",\n  };\n\n\n  const [selectedOption, setSelectedOption] = useState(defaultValue);\n  let [monthRecord, setMonthRecord] = useState([])\n  let [isLoading, setIsLoading] = useState(true)\n\n  const handleChange = (option, element) => {\n    setSelectedOption(option);\n  };\n\n  const getData = async () => {\n    try {\n      const response = await getMonthlyData();\n      setMonthRecord(response);\n    } catch (error) {\n\n    } finally {\n      setIsLoading(false)\n    }\n\n  }\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  if(isLoading) {\n    return <CSpinner color=\"primary\" className='spinner' align=\"center\" />\n  }\n  return (\n    <>\n      <WidgetsDropdown />\n      <WidgetsBrand withCharts />\n\n      <CCard className=\"mb-4\">\n        <CCardFooter>\n          <CRow xs={{ cols: 1 }} md={{ cols: 5 }} className=\"text-center\">\n            {progressExample.map((item, index) => (\n              <CCol className=\"mb-sm-2 mb-0\" key={index}>\n                <div className=\"text-medium-emphasis\">{item.title}</div>\n                <strong>\n                  {item.value} ({item.percent}%)\n                </strong>\n                <CProgress thin className=\"mt-2\" color={item.color} value={item.percent} />\n              </CCol>\n            ))}\n          </CRow>\n        </CCardFooter>\n      </CCard>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>{selectedOption.label}</strong>\n              <Select\n                className=\"leads-select\"\n                options={[\n                  {\n                    id: 1,\n                    value: 'RESPONDED',\n                    label: 'Responded leads',\n                  },\n                  {\n                    id: 2,\n                    value: 'WARM_LEAD',\n                    label: 'Warm leads',\n                  },\n                  {\n                    id: 3,\n                    value: 'UNVISITED',\n                    label: 'Unvisited leads',\n                  },\n                  {\n                    id: 4,\n                    value: 'ALL',\n                    label: 'All leads',\n                  }\n                ]}\n                value={selectedOption}\n                onChange={handleChange}\n              />\n            </CCardHeader>\n            <CCardBody>\n              <Inbox data={monthRecord} selectedOption={selectedOption} />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nexport default Dashboard\n"],"names":["_ref","withCharts","chartOptions","elements","line","tension","point","radius","hitRadius","hoverRadius","hoverBorderWidth","maintainAspectRatio","plugins","legend","display","scales","x","y","_jsxs","CRow","children","_jsx","CCol","sm","lg","CWidgetStatsD","_objectSpread","className","chart","CChart","type","data","labels","datasets","backgroundColor","borderColor","pointHoverBackgroundColor","borderWidth","fill","options","icon","CIcon","cibFacebook","height","values","title","value","style","cibTwitter","cibLinkedin","color","cilCalendar","getDate","today","Date","yyyy","getFullYear","mm","getMonth","dd","getHours","getMinutes","monthlyRecord","id","emailid","content","avatar","avatar1","time","avatar2","avatar3","avatar4","avatar5","avatar6","incidents","yearlyData","getMonthlyData","Promise","resolve","reject","month","setTimeout","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","fetch","concat","sent","json","t0","console","log","finish","stop","getIncidents","_callee2","_context2","_useState","useState","_useState2","_slicedToArray","warmleads","setWarmLeads","_useState3","_useState4","responded","setResponded","_useState5","_useState6","totalLeads","setTotalLeads","_useState7","_useState8","unvisited","setUnvisited","_useState9","_useState10","totalLeadsYearly","setTotalLeadsYearly","_useState11","_useState12","totalWarmLeadsYearly","setTotalWarmLeadsYearly","_useState13","_useState14","totalRespondedYearly","setTotalRespondedYearly","_useState15","_useState16","totalNotVisitedYearly","setTotalNotVisitedYearly","_useState17","_useState18","isLoading","setIsLoading","getData","error","apply","arguments","useEffect","filter","d","toLowerCase","CSpinner","align","CWidgetStatsA","_Fragment","length","CChartLine","Object","keys","label","pointBackgroundColor","getStyle","grid","drawBorder","ticks","min","max","CChartBar","barPercentage","drawTicks","Inbox","_filteredData$slice","selectedOption","selectedLead","setSelectedLead","setIncidents","pageNo","filteredData","setFilteredData","handleClick","_ref2","item","_incidents","_x","slice","map","Item","Suspense","fallback","incident","CAvatar","size","src","CPagination","CPaginationItem","disabled","_ref3","onClick","setSelectedOption","monthRecord","setMonthRecord","_ref4","WidgetsDropdown","WidgetsBrand","CCard","CCardFooter","xs","cols","md","percent","index","CProgress","thin","CCardHeader","Select","onChange","option","element","CCardBody"],"sourceRoot":""}